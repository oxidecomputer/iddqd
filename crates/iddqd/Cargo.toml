[package]
name = "iddqd"
version = "0.2.1"
description = "Maps where keys borrow from values, including bijective and trijective maps."
readme = "README.md"
documentation = "https://docs.rs/iddqd"
repository = "https://github.com/oxidecomputer/iddqd"
keywords = ["id_map", "bijective", "hashmap", "btreemap", "no_std"]
categories = ["data-structures", "no-std"]
edition.workspace = true
license.workspace = true
rust-version.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg=doc_cfg"]

[lints]
workspace = true

[dependencies]
daft = { workspace = true, optional = true }
debug-ignore.workspace = true
derive-where.workspace = true
equivalent.workspace = true
hashbrown.workspace = true
ref-cast = { workspace = true, optional = true }
rustc-hash.workspace = true
serde = { workspace = true, optional = true }

[dev-dependencies]
iddqd-test-utils.workspace = true
proptest.workspace = true
test-strategy.workspace = true

[features]
daft = ["dep:daft", "dep:ref-cast"]
default = ["std"]
std = ["iddqd-test-utils/std", "rustc-hash/std"]
serde = ["dep:serde", "iddqd-test-utils/serde"]

[package.metadata.cargo-sync-rdme.badge.badges]
license = true
crates-io = true
docs-rs = true
rust-version = true

[[example]]
name = "id-complex"
required-features = ["std"]
